@use '../../styles/base/button' as b;
@use '../../styles/base/utils' as u;
@use '../../styles/base/text' as t;

.playerControlsWrapper {
    display: flex;
    flex-direction: column;
    width: 90%;
    gap: u.toRem(16);
}

.playerProgress {
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: u.toRem(12);

    .slider {
        position: absolute;
        max-width: 138px;
        left: 50%;
        transform: translateX(-50%);
    }

    .disabledControls & {
        opacity: 50%;
    }

    span {
        @include t.mini("M", "regular", "one-liner");
        user-select: none;

        &:last-child {
            text-align: right;
        }
    }
}

.controlsWrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: u.toRem(8);
}

.playPauseButton {
    @include b.buttonIconSecondary;

    &.inverted {
        background-color: var(--c-amber-over-accent-container-primary);
    }
}

.nextPreviousButton {
    @include b.buttonIconTertiary;

    @media (hover: hover) {
        &.inverted:not(:disabled):hover {
            background-color: var(--c-amber-over-accent-container-primary);
        }
    }
}

.toggleButton {
    @include b.buttonIconTertiary;
    
    @media (hover: hover) {
        &.inverted:not(:disabled):hover {
            background-color: var(--c-amber-over-accent-container-primary);
        }
    }

    &.selectedButton.inverted {
        background-color: var(--c-amber-over-accent-container-primary);
    }

    &.selectedButton {
        background-color: var(--c-amber-accent-container-secondary);
    }
}